services:
  nonogramserverdb:
    image: postgres:latest
    container_name: ${DB_NAME}
    restart: always
    environment:
      PGUSER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGPORT: ${DB_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
    ports:
      - "${DB_PORT}:${DB_PORT}"
    networks:
      - nonogram_net
    env_file:
      - .env

  nonogramserver:
    image: nonogram_server:${NONOGRAM_SERVER_VERSION:-latest}
    container_name: ${NONOGRAM_SERVER_HOST}
    environment:
      NONOGRAM_SERVER_SECRET_KEY: ${NONOGRAM_SERVER_SECRET_KEY}
      NONOGRAM_SERVER_HOST: ${NONOGRAM_SERVER_HOST}
      API_SERVER_PROTOCOL: ${API_SERVER_PROTOCOL}
      API_SERVER_HOST: ${API_SERVER_HOST}
      API_SERVER_PORT: ${API_SERVER_PORT}
      ENABLE_PROMETHEUS: ${ENABLE_PROMETHEUS}
      PROMETHEUS_PROTOCOL: ${PROMETHEUS_PROTOCOL}
      PROMETHEUS_HOST: ${PROMETHEUS_HOST}
      PROMETHEUS_PORT: ${PROMETHEUS_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      LOG_PATH: ${LOG_PATH}
      DEBUG: ${DEBUG}
    command: bash -c "python src/NonogramServer/manage.py runserver 0.0.0.0:${NONOGRAM_SERVER_PORT}"
    healthcheck:
      test: curl --fail http://localhost:${NONOGRAM_SERVER_PORT}/healthcheck || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    ports:
      - "${NONOGRAM_SERVER_PORT}:${NONOGRAM_SERVER_PORT}"
    volumes:
      - ./logs:/logs
    networks:
      - nonogram_net
    depends_on:
      nonogramserverdb:
        condition: service_healthy
    env_file:
      - .env

  apiserver:
    image: api_server:${API_SERVER_VERSION:-latest}
    container_name: ${API_SERVER_HOST}
    environment:
      API_SERVER_SECRET_KEY: ${API_SERVER_SECRET_KEY}
      NONOGRAM_SERVER_PROTOCOL: ${NONOGRAM_SERVER_PROTOCOL}
      NONOGRAM_SERVER_HOST: ${NONOGRAM_SERVER_HOST}
      NONOGRAM_SERVER_PORT: ${NONOGRAM_SERVER_PORT}
      FRONTEND_SERVER_PROTOCOL: ${FRONTEND_SERVER_PROTOCOL}
      FRONTEND_SERVER_HOST: ${FRONTEND_SERVER_HOST}
      FRONTEND_SERVER_PORT: ${FRONTEND_SERVER_PORT}
      API_SERVER_HOST: ${API_SERVER_HOST}
      ENABLE_PROMETHEUS: ${ENABLE_PROMETHEUS}
      PROMETHEUS_PROTOCOL: ${PROMETHEUS_PROTOCOL}
      PROMETHEUS_HOST: ${PROMETHEUS_HOST}
      PROMETHEUS_PORT: ${PROMETHEUS_PORT}
      SERVER_DOMAIN: ${SERVER_DOMAIN}
      LOG_PATH: ${LOG_PATH}
      DEBUG: ${DEBUG}
    command: bash -c "python src/ApiServer/manage.py runserver 0.0.0.0:${API_SERVER_PORT}"
    healthcheck:
      test: curl --fail http://localhost:${API_SERVER_PORT}/healthcheck || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    ports:
      - "${API_SERVER_PORT}:${API_SERVER_PORT}"
    volumes:
      - ./logs:/logs
    networks:
      - nonogram_net
    env_file:
      - .env

  frontendserver:
    image: frontend_server:${FRONTEND_SERVER_VERSION:-latest}
    container_name: ${FRONTEND_SERVER_HOST}
    environment:
      REACT_APP_API_SERVER_PROTOCOL: ${API_SERVER_PROTOCOL}
      REACT_APP_API_SERVER_DOMAIN: ${SERVER_DOMAIN}
      DEBUG: ${DEBUG}
    command: bash -c "npm start"
    healthcheck:
      test: curl --fail http://localhost:${FRONTEND_SERVER_PORT}/healthcheck || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    ports:
      - "${FRONTEND_SERVER_PORT}:${FRONTEND_SERVER_PORT}"
    networks:
      - nonogram_net
    env_file:
      - .env

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    environment:
      SERVER_DOMAIN: ${SERVER_DOMAIN}
      API_SERVER_PROTOCOL: ${API_SERVER_PROTOCOL}
      API_SERVER_HOST: ${API_SERVER_HOST}
      API_SERVER_PORT: ${API_SERVER_PORT}
      FRONTEND_SERVER_PROTOCOL: ${FRONTEND_SERVER_PROTOCOL}
      FRONTEND_SERVER_HOST: ${FRONTEND_SERVER_HOST}
      FRONTEND_SERVER_PORT: ${FRONTEND_SERVER_PORT}
      GRAFANA_PROTOCOL: ${GRAFANA_PROTOCOL}
      GRAFANA_HOST: ${GRAFANA_HOST}
      GRAFANA_PORT: ${GRAFANA_PORT}
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/templates/default.conf.template
    depends_on:
      frontendserver:
        condition: service_healthy
      apiserver:
        condition: service_healthy
    networks:
      - nonogram_net

  prometheus:
    image: prom/prometheus
    container_name: ${PROMETHEUS_HOST}
    ports:
      - ${PROMETHEUS_PORT}:${PROMETHEUS_PORT}
    volumes:
      - ./prometheus/.temp/prometheus.yaml:/etc/prometheus/prometheus.yml
      - ./prometheus/django.rules:/etc/prometheus/django.rules
    environment:
      NONOGRAM_SERVER_HOST: ${NONOGRAM_SERVER_HOST}
      NONOGRAM_SERVER_PORT: ${NONOGRAM_SERVER_PORT}
      API_SERVER_HOST: ${API_SERVER_HOST}
      API_SERVER_PORT: ${API_SERVER_PORT}
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      nonogramserver:
        condition: service_healthy
      apiserver:
        condition: service_healthy
    networks:
      - nonogram_net

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_INSTALL_PLUGINS=grafana-clock-panel
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_DOMAIN=${SERVER_DOMAIN}
      - GF_SERVER_HTTP_PORT=${GRAFANA_PORT}
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/monitor/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - USER_NAME
      - USER_ID
      - GROUP_NAME
      - GROUP_ID
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    volumes:
      - './grafana:/var/lib/grafana'
    networks:
      - nonogram_net

networks:
  nonogram_net:
    driver: bridge